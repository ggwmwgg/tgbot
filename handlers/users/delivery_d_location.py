from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Text, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from loader import dp
from states.orders import Order, Reg
from utils.db_api import quick_commands
from utils.misc import rate_limit, get_address_from_coords
from utils.misc.calc_distance import choose_shortest_kek


# –î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?
@rate_limit(1, key="order")
@dp.message_handler(Command("order"), state=None)
@dp.message_handler(Text(equals=["–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ", "Start ordering üçΩ", "Buyurtmani boshlash üçΩ"]), state='*')
async def start_ordering(message: types.Message):
    if await quick_commands.select_user(id=message.from_user.id):
        if await quick_commands.check_last_order_data(message.from_user.id):
            user = await quick_commands.select_user(id=message.from_user.id)
            latitude = user.latitude
            longitude = user.longitude
            branch = user.branch

            type = ""
            if user.last == 1:
                type = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif user.last == 2:
                type = "–°–∞–º–æ–≤—ã–≤–æ–∑"
            a_ss = ""
            try:
                address_str = get_address_from_coords(f"{longitude},{latitude}")
                a_ss = address_str[21:]
            except:
                a_ss = "Error"

            type = f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞?\n\n<b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {type}\n<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {a_ss}\n<b>–§–∏–ª–∏–∞–ª:</b> {branch}\n\n<b><i>–ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ?</i></b>"

            old_d_or_d = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ üìù"),
                    ],
                    [
                        KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üìÑ")
                    ]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )

            await message.answer(type, reply_markup=old_d_or_d)
            await Order.d_or_d.set()


        else:

            d_or_d = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöï"),
                        KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ")
                    ],
                    [
                        KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                    ]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )

            await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=d_or_d)
            await Order.asklocation.set()
    else:

        languages = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="O'zbek üá∫üáø"),
                ],
                [
                    KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
                ],
                [
                    KeyboardButton(text="English üá∫üá∏")
                ]
            ],
            resize_keyboard=True
        )

        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.üó£\n\n"
                             f"Hello, {message.from_user.full_name}!\n"
                             "Please, choose your language.üó£\n\n"
                             f"Keling, {message.from_user.full_name}!\n"
                             "Avvaliga xizmat ko'rsatish tilini tanlab olaylik.üó£", reply_markup=languages)

        await Reg.language.set()


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
@rate_limit(1, key="delivery")
@dp.message_handler(state=Order.d_or_d)
async def ask_delivery(message: types.Message):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    old = ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ üìù", "Use previous data üìù", "Oldingi ma'lumotlardan foydalaning üìù"]
    new = ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üìÑ", "Use new data üìÑ", "Yangi ma'lumotlardan foydalaning üìÑ"]
    if message.text in old:
        cats = await quick_commands.get_categories(lang)
        cat_lan = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(
            *[KeyboardButton(text=cat) for cat in cats])
        await message.answer("–ù–∞—á–Ω–µ–º –∑–∞–∫–∞–∑?", reply_markup=cat_lan)
        # print(cats)
        await quick_commands.update_last_order_type(message.from_user.id, 1)
        await Order.menu.set()
    elif message.text in new:

        d_or_d = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöï"),
                    KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ")
                ],
                [
                    KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=d_or_d)
        await quick_commands.update_last_order_type(id, 0)
        await quick_commands.update_last_branch(id, "Null")
        await quick_commands.update_last_order_coords(id, 0, 0)
        await Order.asklocation.set()
    else:

        old_d_or_d = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ üìù"),
                ],
                [
                    KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üìÑ")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=old_d_or_d)


# –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–æ—Å—å–±–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
@rate_limit(1, key="delivery")
@dp.message_handler(Text(equals=["–î–æ—Å—Ç–∞–≤–∫–∞ üöï", "Delivery üöï", "Yetkazib berish üöï"]), state=Order.asklocation)
async def ask_delivery(message: types.Message):

    location = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üìç", request_location=True)
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "
                         "–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ –í–∞—Å —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=location)

    await Order.location_delivery.set()

# –ù–∞–∑–∞–¥ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Order.location_delivery)
async def ask_delivery(message: types.Message):

    d_or_d = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöï"),
                KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ")
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=d_or_d)
    await Order.asklocation.set()




# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –≤ –±–¥.
@rate_limit(1, key="delivery")
@dp.message_handler(content_types=types.ContentType.LOCATION, state=Order.location_delivery)
async def delivery_set(message: types.Message, state: FSMContext):
    location = message.location
    await state.update_data(location=location)  # –ó–∞–ø–∏—Å—å –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –±–¥
    # print(location)
    address_str = get_address_from_coords(f"{location.longitude},{location.latitude}")

    a_ss = address_str[21:]
    text = "–í–∞—à –∞–¥—Ä–µ—Å %s.\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ?"
    text = text % a_ss

    delivery_yes_no = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úî"),
            ],
            [
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ üìç")
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(text,reply_markup=delivery_yes_no)

    await Order.location_delivery_another.set()


# –ù–∞–∑–∞–¥ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Order.location_delivery_another)
async def ask_delivery(message: types.Message):
    d_or_d = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöï"),
                KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ")
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=d_or_d)
    await Order.asklocation.set()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.
@rate_limit(1, key="delivery")
@dp.message_handler(Text(equals=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ üìç", "Send again üìç", "Yana yuboring üìç"]), state=Order.location_delivery_another)
async def confirmed_delivery(message: types.Message):

    location = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üìç", request_location=True)
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "
                         "–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ –í–∞—Å —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=location)

    await Order.location_delivery.set()


# –ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
@rate_limit(1, key="delivery")
@dp.message_handler(Text(equals=["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úî", "Confirm ‚úî", "Tasdiqlang ‚úî"]), state=Order.location_delivery_another)
async def confirmed_delivery(message: types.Message, state: FSMContext):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    cats = await quick_commands.get_categories(lang)
    async with state.proxy() as data:
        location_delivery = data["location"]

        closest_shops = await choose_shortest_kek(location_delivery)
        text = ""
        del_price = 0
        for shop_name, distance, url, shop_location in closest_shops:
            # print(distance)
            kek = (distance + 2000) / 1000
            dist = round(kek, 1) + 1
            # print(shop_location)
            if dist < 3:
                del_price = 10000
            elif dist >= 3 and dist < 7:
                del_price = 15000
            else:
                del_price = 20000
            text = "–í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª: %s\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–µ–≥–æ %s –∫–º.\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: %s —Å—É–º\n\n–ù–∞—á–Ω–µ–º –∑–∞–∫–∞–∑?" % (shop_name, dist, del_price)
        await quick_commands.update_delivery_price(id, del_price)

        # await message.answer(text, reply_markup=ReplyKeyboardRemove())
        await quick_commands.update_last_order_coords(message.from_user.id, location_delivery.latitude,
                                                      location_delivery.longitude)
        for shop_name, distance, url, shop_location in closest_shops:
            await state.update_data(branch=shop_name)
            await quick_commands.update_last_branch(message.from_user.id, shop_name)
    cat_lan = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(*[KeyboardButton(text=cat) for cat in cats])
    await message.answer(text, reply_markup=cat_lan)
    # print(cats)
    await quick_commands.update_last_order_type(message.from_user.id, 1)
    await Order.menu.set()


# –ê–¥—Ä–µ—Å –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
@rate_limit(2, key="location")
@dp.message_handler(Text(equals=["–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ", "Pickup üèÉ", "Termoq üèÉ"]), state=Order.asklocation)
async def ask_drive_thru(message: types.Message):

    location = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üìç", request_location=True)
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True
    )
    txt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ –í–∞—Å —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞"
    await message.answer(txt, reply_markup=location)

    await Order.location_drive.set()


# –ù–∞–∑–∞–¥ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Order.location_drive)
async def ask_delivery(message: types.Message):
    d_or_d = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöï"),
                KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ")
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=d_or_d)
    await Order.asklocation.set()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
@rate_limit(2, key="drive")
@dp.message_handler(content_types=types.ContentType.LOCATION, state=Order.location_drive)
async def ask_again_drive(message: types.Message, state: FSMContext):
    location_drive = message.location
    closest_shops = await choose_shortest_kek(location_drive)
    await state.update_data(location=location_drive)  # –ó–∞–ø–∏—Å—å –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –±–¥

    text = "\n\n".join([f"–ë–ª–∏–∂–∞–π—à–∏–π —Ñ–∏–ª–∏–∞–ª: {shop_name}. <a href='{url}'>Google</a>\n"
                        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–µ–≥–æ: {(distance + 2000) / 1000:.1f} –∫–º.\n"
                        f"–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ –Ω–µ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª?"
                        for shop_name, distance, url, shop_location in closest_shops])

    yes_no = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üìù"),
            ],
            [
                KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π üè†"),
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    txt = "–°–ø–∞—Å–∏–±–æ. \n\n" + text
    await message.answer(txt, disable_web_page_preview=True, reply_markup=yes_no)

    for shop_name, distance, url, shop_location in closest_shops:
        await message.answer_location(latitude=shop_location["lat"],
                                      longitude=shop_location["lon"])

        await state.update_data(branch=shop_name)

    await Order.location_drive_another.set()

# –ù–∞–∑–∞–¥ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Order.location_drive_another)
async def ask_delivery(message: types.Message):

    d_or_d = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöï"),
                KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üèÉ")
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?", reply_markup=d_or_d)
    await Order.asklocation.set()


# –ê–¥—Ä–µ—Å –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
@rate_limit(2, key="drive")
@dp.message_handler(Text(equals=["–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üìù", "Save üìù", "Saqlash üìù"]), state=Order.location_drive_another)
async def confirm_drive(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª–∏–∞–ª: {data["branch"]}')
        id = message.from_user.id
        lang = await quick_commands.select_language(id)
        cats = await quick_commands.get_categories(lang)
        cat_lan = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(*[KeyboardButton(text=cat) for cat in cats])
        await message.answer("–ù–∞—á–Ω–µ–º –∑–∞–∫–∞–∑?", reply_markup=cat_lan)
        location_delivery = data["location"]
        shop_name = data["branch"]
        await quick_commands.update_last_order_type(id, 2)
        await quick_commands.update_last_order_coords(id, location_delivery.latitude, location_delivery.longitude)
        await quick_commands.update_last_branch(id, shop_name)

        await Order.menu.set()


# –í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
@rate_limit(2, key="drive_a")
@dp.message_handler(Text(equals=["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π üè†", "Choose another üè†", "Boshqasini tanlang üè†"]), state=Order.location_drive_another)
async def change_drive(message: types.Message):
    branches_list = []
    for branch in await quick_commands.select_all_branches_list():
        branches_list.append([branch])
    branches = ReplyKeyboardMarkup(branches_list, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=branches)
    await Order.location_drive_another.set()


# –í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞.
@rate_limit(2, key="drive_a")
@dp.message_handler(state=Order.location_drive_another)
async def confirm_drive_again(message: types.Message, state: FSMContext):
    list = await quick_commands.select_all_branches_list()
    if message.text in list:


        await state.update_data(branch=message.text)

        yes_no = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üìù"),
                ],
                [
                    KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π üè†"),
                ],
                [
                    KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        text = "–í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª: %s\n–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ –Ω–µ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª?"
        text = text % message.text
        await message.answer(text, reply_markup=yes_no)

        await Order.location_drive_another.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª–∏–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@rate_limit(1, key="delivery")
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Order.asklocation)
async def back_delivery(message: types.Message, state: FSMContext):
    main_menu = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
            ],
            [
                KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
            ],
            [
                KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer(f'–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é?', reply_markup=main_menu)
    await state.finish()


