from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from loader import dp
from states.orders import Order
from utils.db_api import quick_commands
from data.config import cashback as cb
from utils.misc import rate_limit, get_address_from_coords


# –ö–æ—Ä–∑–∏–Ω–∞ —Ç–µ—Å—Ç
@rate_limit(1, key="cart")
# @dp.message_handler(Text(equals=["–ö–æ—Ä–∑–∏–Ω–∞"]), state=Order.menu)
# @dp.message_handler(Text(equals=["–ö–æ—Ä–∑–∏–Ω–∞"]), state=Order.menu_subcat)
# @dp.message_handler(Text(equals=["–ö–æ—Ä–∑–∏–Ω–∞"]), state=Order.menu_item)


# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@rate_limit(1, key="cart")
async def start_order(message: types.Message, state: FSMContext):
    id = message.from_user.id

    lang = await quick_commands.select_language(id)

    if await quick_commands.select_cart(id):


        lil = await message.answer(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        await lil.delete()

        no_comm = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        no_comm.add(types.InlineKeyboardButton("–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ üí≠", callback_data='no_comm'),
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        text = "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n"
        lul = await message.answer(text, reply_markup=no_comm)
        msg = lul['message_id']
        await state.update_data(msg_id=msg)
        await Order.menu_confirm.set()
    else:

        main_menu = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                ],
                [
                    KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                    KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                ],
                [
                    KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                    KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                ]
            ],
            resize_keyboard=True
        )

        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu)
        cats = await quick_commands.get_categories(lang)
        cat_lan = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(
            *[KeyboardButton(text=cat) for cat in cats])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=cat_lan)
        await Order.menu.set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(state=Order.menu_confirm)
async def comment_order_query(query: types.CallbackQuery, state: FSMContext):
    global lang
    id = query.from_user.id
    lang = await quick_commands.select_language(id)


    if query.data == "no_comm":
        text = "<b>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b>\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        await query.message.edit_text(text=text, parse_mode="HTML", reply_markup=None)

        payment_type = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        payment_type.add(types.InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ üíµ", callback_data='cash'),
                         types.InlineKeyboardButton("Click üí∏", callback_data='click'),
                         types.InlineKeyboardButton("Payme üí∏", callback_data='payme'),
                         types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        lilo = await dp.bot.send_message(chat_id=id, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>", parse_mode="HTML", reply_markup=payment_type)
        await state.update_data(msg_id=lilo['message_id'])
        await Order.menu_confirm_payment.set()
    elif query.data == "back":

        text = "<b>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É\n</b>"
        await dp.bot.delete_message(chat_id=id, message_id=query.message.message_id)
        cats = await quick_commands.get_categories(lang)
        cat_lan = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(
            *[KeyboardButton(text=cat) for cat in cats])
        await dp.bot.send_message(chat_id=id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=cat_lan)
        await Order.menu.set()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É
@dp.message_handler(state=Order.menu_confirm)
async def comment_comm_msg(message: types.Message, state: FSMContext):
    global lang
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    await state.update_data(comment=message.text)
    async with state.proxy() as data:
        msg_id = data['msg_id']
        # print(msg_id)
    await dp.bot.edit_message_text(chat_id=id, message_id=msg_id, text="<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n\n", parse_mode="HTML")

    payment_type = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
    payment_type.add(types.InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ üíµ", callback_data='cash'),
                     types.InlineKeyboardButton("Click üí∏", callback_data='click'),
                     types.InlineKeyboardButton("Payme üí∏", callback_data='payme'),
                     types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

    lilo = await message.answer(text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>", parse_mode="HTML", reply_markup=payment_type)
    await state.update_data(msg_id=lilo['message_id'])
    await Order.menu_confirm_payment.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã (–í—ã–±—Ä–∞–Ω Payme, Click, Cash) –∏ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(state=Order.menu_confirm_payment)
async def payment_order_query(query: types.CallbackQuery, state: FSMContext):
    global lang
    id = query.from_user.id
    user = await quick_commands.select_user(id)
    lang = await quick_commands.select_language(id)
    async with state.proxy() as data:
        msg_id = data['msg_id']
        type = ""
        if query.data == "payme":
            type = "Payme"
        elif query.data == "click":
            type = "Click"
        elif query.data == "cash":
            type = "–ù–∞–ª–∏—á–Ω—ã–µ"
        comment = ""
        branch = user.branch
        pr = "—Å—É–º"
        total = "–ò—Ç–æ–≥–æ"
        address_str = get_address_from_coords(f"{user.longitude},{user.latitude}")
        adress = address_str[21:]
        try:
            comment = data['comment']
        except:
            comment = "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        cart = "<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n\n"
        txt = ""
        price_total = 0
        for item in await quick_commands.select_cart(id):
            name = await quick_commands.select_item_name(item.item_id, lang)
            price = await quick_commands.select_item_price(item.item_id)
            price_total += item.price
            cart += f"<b>{name}</b>\n" + f"<b>{item.quantity}</b>" + " x " + f"{price}" + " = " + f"{item.price} {pr}\n\n"
        if user.last == 1:
            price_total += user.last_delivery
            for_txt = f"\n\n–¢–∏–ø: –î–æ—Å—Ç–∞–≤–∫–∞\n–ê–¥—Ä–µ—Å: {adress}\n–ù–æ–º–µ—Ä: {user.number}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {type}\n"
            text = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n–¢–∏–ø: –î–æ—Å—Ç–∞–≤–∫–∞\n–ê–¥—Ä–µ—Å: {adress}\n–ù–æ–º–µ—Ä: {user.number}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {type}\n"
            if comment != "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤":
                text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
                for_txt += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"

            txt_for = cart + f"<b>–î–æ—Å—Ç–∞–≤–∫–∞</b> = <b><i>{user.last_delivery} {pr}</i></b>\n\n<b><i>{total}: </i>" + f"{price_total} {pr}</b>\n\n\n<b><i>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω</i></b>\n<i>–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä</i>"
            txt = for_txt + txt_for
            cart += f"<b>–î–æ—Å—Ç–∞–≤–∫–∞</b> = <b><i>{user.last_delivery} {pr}</i></b>\n\n<b><i>{total}: </i>" + f"{price_total} {pr}</b>\n\n<i>–î–æ—Å—Ç–∞–≤–∏–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞</i>\n\n\n<b><i>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?</i></b>"
            text += f"\n{cart}"
            await state.update_data(price_total=price_total)
            await state.update_data(delivery_price=user.last_delivery)


        elif user.last == 2:
            for_txt = f"\n\n–¢–∏–ø: –°–∞–º–æ–≤—ã–≤–æ–∑\n–§–∏–ª–∏–∞–ª: {branch}\n–ù–æ–º–µ—Ä: {user.number}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {type}\n"
            text = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n–¢–∏–ø: –°–∞–º–æ–≤—ã–≤–æ–∑\n–§–∏–ª–∏–∞–ª: {branch}\n–ù–æ–º–µ—Ä: {user.number}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {type}\n"
            if comment != "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤":
                text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
                for_txt += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"

            txt_for = f"\n<b><i>{total}: </i>" + f"{price_total} {pr}</b>\n\n\n<b><i>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω</i></b>\n<i>–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä</i>"
            txt = for_txt + cart + txt_for
            cart += f"\n<b><i>{total}: </i>" + f"{price_total} {pr}</b>\n\n<i>–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞</i>\n\n\n<b><i>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?</i></b>"
            text = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:</b>\n\n–¢–∏–ø: –°–∞–º–æ–≤—ã–≤–æ–∑\n–§–∏–ª–∏–∞–ª: {branch}\n–ù–æ–º–µ—Ä: {user.number}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {type}\n"
            text += f"\n{cart}"
            await state.update_data(price_total=price_total)
            await state.update_data(delivery_price=0)



        text_edit = f"<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n\n{type}"


    if query.data == "cash":
        await query.message.edit_text(text_edit, parse_mode="html")
        # await dp.bot.edit_message_text(chat_id=id, message_id=msg_id, text=text_edit, parse_mode="HTML")

        conf = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        conf.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úî", callback_data='yes'),
                 types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚úñ", callback_data='no'))

        lilo = await dp.bot.send_message(chat_id=id, text=text, reply_markup=conf)
        await state.update_data(msg_id=lilo['message_id'])
        await state.update_data(type=type)
        await state.update_data(text=txt)
        await Order.menu_confirmed.set()


    elif query.data == "click":
        pass
    elif query.data == "payme":

        pass
    elif query.data == "back":
        await query.message.delete()
        if await quick_commands.select_cart(id):

            no_comm = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
            no_comm.add(types.InlineKeyboardButton("–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ üí≠", callback_data='no_comm'),
                        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            text = "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n"
            lul = await dp.bot.send_message(chat_id=id, text=text,
                                       reply_markup=no_comm)
            await state.update_data(msg_id=lul['message_id'])
            await Order.menu_confirm.set()
        else:

            main_menu = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                    ],
                    [
                        KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                        KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                    ],
                    [
                        KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                        KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                    ]
                ],
                resize_keyboard=True
            )

            await dp.bot.send_message(chat_id=id, text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu)
            cats = await quick_commands.get_categories(lang)
            cat_lan = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(
                *[KeyboardButton(text=cat) for cat in cats])
            await dp.bot.send_message(chat_id=id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=cat_lan)
            await Order.menu.set()



# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–¥, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
@dp.callback_query_handler(state=Order.menu_confirmed)
async def menu_confirmed(query: types.CallbackQuery, state: FSMContext):
    id = query.from_user.id
    user = await quick_commands.select_user(id)
    async with state.proxy() as data:
        # msg_id = data['msg_id']
        type = data['type']
        txt_i = data['text']
        total_price = data['price_total']
        delivery_price = data['delivery_price']
        cashback = int(total_price * cb)
        type_delivery = user.last
        lon = user.longitude
        lat = user.latitude
        branch = user.branch
    if query.data == "yes":
        if type == "–ù–∞–ª–∏—á–Ω—ã–µ":
            is_paid = 0
            p_type = "Cash"
            items = {}
            for i in await quick_commands.select_cart(id):
                items[i.item_id] = i.quantity
            try:
                comment = data['comment']
            except:
                comment = "Null"
            await quick_commands.add_order(id, p_type, items, comment, total_price, delivery_price, cashback,
                                           type_delivery, is_paid, lon, lat, branch)
            order = await quick_commands.select_last_order_by_id(id)
            txt = f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>" + txt_i
            for_admins = f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b> {order.id}\n\n–û–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            for i in await quick_commands.select_operators():
                await dp.bot.send_message(chat_id=i, text=for_admins)
            await quick_commands.clear_cart_by_user_id(id)
            await query.message.delete()

            main_menu = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                    ],
                    [
                        KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                        KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                    ],
                    [
                        KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                        KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                    ]
                ],
                resize_keyboard=True
            )

            await dp.bot.send_message(chat_id=id, text=txt, parse_mode="HTML", reply_markup=main_menu)
            await state.finish()
        if type == "Click":
            pass
        if type == "Payme":
            pass

    elif query.data == "no":
        await query.message.delete()

        payment_type = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        payment_type.add(types.InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ üíµ", callback_data='cash'),
                         types.InlineKeyboardButton("Click üí∏", callback_data='click'),
                         types.InlineKeyboardButton("Payme üí∏", callback_data='payme'),
                         types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        lilo = await dp.bot.send_message(chat_id=id, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>", parse_mode="HTML", reply_markup=payment_type)
        await state.update_data(msg_id=lilo['message_id'])
        await Order.menu_confirm_payment.set()
        pass