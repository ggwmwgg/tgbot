from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from loader import dp
from states.orders import Orders
from utils.misc import rate_limit
from utils.db_api import quick_commands
import gettext


@rate_limit(1, key="my_orders")
@dp.message_handler(Text(equals=["My orders", "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "Mening buyurtmalarim"]), state=None)
async def orders_view(message: types.Message, state: FSMContext):
    lang = await quick_commands.select_language(message.from_user.id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    id = message.from_user.id
    orders = await quick_commands.select_all_orders_by_id(id)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if orders:
        count = 0
        for order in orders:
            if count <= 10:
                time_registered = order.created_at.strftime("%d.%m.%Y %H:%M")
                text = _("–ó–∞–∫–∞–∑ ‚Ññ%s –æ—Ç %s") % (order.id, time_registered)
                keyboard.add(types.InlineKeyboardButton(text=text, callback_data=order.id))
                count += 1
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data='back'))
    text_msg = _("<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–∫–∞–∑–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    await message.answer(text_msg, reply_markup=keyboard)
    await Orders.o_main.set()


@rate_limit(1, 'orders')
@dp.callback_query_handler(state=Orders.o_main)
async def order_view(query: types.CallbackQuery, state: FSMContext):
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=["ru"])
    lan.install()
    _ = lan.gettext
    if query.data == 'back':
        await query.message.delete()
        main_menu = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                ],
                [
                    KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                    KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                ],
                [
                    KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                    KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                ]
            ],
            resize_keyboard=True
        )
        await dp.bot.send_message(id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üå´", reply_markup=main_menu)
        await state.finish()
    else:
        await query.message.delete()
        order = await quick_commands.select_order_by_id(int(query.data))
        if order:
            txt = await quick_commands.admin_text(int(query.data), lang)
            status = ""
            if order.status == 1:
                status = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚åõ"
            elif order.status == 2:
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ"
            elif order.status == 3:
                status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è üç≥"
            elif order.status == 4:
                status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ üöö"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úÖ"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω ‚ùå"
            # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
            txt += _("\n<i><b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: %s</b></i>") % status
            inline_kb1 = types.InlineKeyboardMarkup(row_width=1)
            inline_kb1.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back"))
            await dp.bot.send_message(id, txt, parse_mode="HTML", reply_markup=inline_kb1)
            await Orders.o_main_action.set()
        else:
            await query.message.edit_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@rate_limit(1, 'orders_action')
@dp.callback_query_handler(state=Orders.o_main_action)
async def orders_a(query: types.CallbackQuery, state: FSMContext):
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    if query.data == 'back':
        await query.message.delete()
        orders = await quick_commands.select_all_orders_by_id(id)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        if orders:
            count = 0
            for order in orders:
                if count <= 10:
                    time_registered = order.created_at.strftime("%d.%m.%Y %H:%M")
                    text = "–ó–∞–∫–∞–∑ ‚Ññ%s –æ—Ç %s" % (order.id, time_registered)
                    keyboard.add(types.InlineKeyboardButton(text=text, callback_data=order.id))
                    count += 1
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data='back'))
        text_msg = "<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–∫–∞–∑–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        await dp.bot.send_message(id, text_msg, reply_markup=keyboard)
        await Orders.o_main.set()


