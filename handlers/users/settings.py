from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Text, Command
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
import re
from loader import dp
from states.orders import Reg, Settings
from utils.db_api import quick_commands
import os
from dotenv import load_dotenv
from twilio.rest import Client
from random import randint
from utils.misc import rate_limit


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@rate_limit(1, key="settings")
@dp.message_handler(Command("settings"), state=None)
@dp.message_handler(Text(equals=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†", "Settings üõ†", "Sozlamalar üõ†"]), state=None)
async def settings_select(message: types.Message, state: FSMContext):
    id = message.from_user.id
    text = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–ö–µ—à–±–µ–∫: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n\n"
    if await quick_commands.select_user(id):
        user = await quick_commands.select_user(id)
        lang = ""
        if user.lang_user == 'ru':
            lang = '–†—É—Å—Å–∫–∏–π üá∑üá∫'
        elif user.lang_user == 'en':
            lang = 'English üá∫üá∏'
        elif user.lang_user == 'uz':
            lang = "O'zbek üá∫üáø"
        date_reg = user.created_at.strftime("%d.%m.%Y %H:%M")
        text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
        edit = "<i>–ß—Ç–æ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</i>"
        txt = text + edit
        lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞", reply_markup=ReplyKeyboardRemove())
        await lil.delete()

        settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                     types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                     types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
        settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await message.answer(txt, reply_markup=settings, parse_mode='HTML')
        await Settings.settings.set()
    else:

        languages = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="O'zbek üá∫üáø"),
                ],
                [
                    KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
                ],
                [
                    KeyboardButton(text="English üá∫üá∏")
                ]
            ],
            resize_keyboard=True
        )

        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.üó£\n\n"
                             f"Hello, {message.from_user.full_name}!\n"
                             "Please, choose your language.üó£\n\n"
                             f"Keling, {message.from_user.full_name}!\n"
                             "Avvaliga xizmat ko'rsatish tilini tanlab olaylik.üó£", reply_markup=languages)

        await Reg.language.set()


@rate_limit(1, key="settings_main")
@dp.callback_query_handler(state=Settings.settings)
async def settings_main(query: types.CallbackQuery, state: FSMContext):
    user = await quick_commands.select_user(query.from_user.id)
    await query.message.delete()
    if query.data == "name":
        text = "<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n–í–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è: %s\n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ò–º—è</i>"
        text = text % user.name
        #await query.message.edit_reply_markup(reply_markup=None)
        # await query.message.edit_text(text, parse_mode='HTML', reply_markup=None)
        await dp.bot.send_message(query.from_user.id, text, parse_mode='HTML', reply_markup=None)
        await Settings.name.set()
    elif query.data == "lang":
        text = ""
        if user.lang_user == 'ru':
            text = "<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —è–∑—ã–∫:</i>"
        elif user.lang_user == 'en':
            text = "<b>Change language</b>\n\nYour current language: English\n\n<i>Choose a new language:</i>"
        elif user.lang_user == 'uz':
            text = "<b>Til o'zgarishi</b>\n\nJoriy tilingiz: o ªzbek\n\n<i>Yangi tilni tanlang:</i>"

        lang_set = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        lang_set.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='ru'),
                     types.InlineKeyboardButton("English üá∫üá∏", callback_data='en'),
                     types.InlineKeyboardButton("O'zbek üá∫üáø", callback_data='uz'))
        lang_set.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(query.from_user.id, text, parse_mode='HTML', reply_markup=lang_set)

        await Settings.language.set()
    elif query.data == "number":
        text = "<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: %s\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998911234567</i>"
        text = text % user.number

        nmbr_s = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤", request_contact=True)
                ],
                [
                    KeyboardButton(text="–ù–∞–∑–∞–¥ üîô"),
                ]
            ],
            resize_keyboard=True
        )

        await dp.bot.send_message(query.from_user.id, text, parse_mode='HTML', reply_markup=nmbr_s)
        await Settings.number.set()
    elif query.data == "back":
        text = "–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?"
        main_menu = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                ],
                [
                    KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                    KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                ],
                [
                    KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                    KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                ]
            ],
            resize_keyboard=True
        )

        await dp.bot.send_message(query.from_user.id, text, parse_mode='HTML', reply_markup=main_menu)
        await state.finish()



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å
@rate_limit(2, key="nn")
@dp.message_handler(state=Settings.number, content_types=["text", "contact"])
async def num_nn(message: types.Message, state: FSMContext):
    number = ""
    if message.text == "Back üîô" or message.text == "–ù–∞–∑–∞–¥ üîô" or message.text == "Orqaga üîô":

        settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                     types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                     types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
        settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†", reply_markup=settings)
        await Settings.settings.set()
    if message.text:
        number = message.text
    elif message.contact.phone_number:
        number_i = message.contact.phone_number
        number = "+" + number_i


    # await message.answer(f"{number}")
    pattern = '(^\+998[8-9])\d{8}$'
    result = re.match(pattern, number)

    if result:
        if await quick_commands.check_number(number):
            await message.answer("–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä")
        else:

            load_dotenv()
            verification_code = str(randint(100000, 999999))
            account = str(os.getenv("account_twilio"))
            token = str(os.getenv("token_twilio"))
            client = Client(account, token)

            # messages = client.messages.create(to=f"{number}", from_="+14632231765",
            #                                  body=f"GGsellbot: {verification_code}")

            await message.answer(f"–ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ. {verification_code}",
                                 reply_markup=ReplyKeyboardRemove())
            await state.update_data(verification_code=verification_code)
            await Settings.number_code.set()
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998911234567")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
@rate_limit(2, key="code")
@dp.message_handler(state=Settings.number_code, content_types=["text"])
async def verification_code_check(message: types.Message, state: FSMContext):
    id = message.from_user.id
    user = await quick_commands.select_user(id)
    lang = ""
    user_entry = message.text
    async with state.proxy() as data:
        verification_code = data["verification_code"]
        result = re.match(user_entry, verification_code)
        if result:
            num = data["number"]
            await quick_commands.update_user_number(id=message.from_user.id, number=num)
            text = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–ö–µ—à–±–µ–∫: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n\n"
            if user.lang_user == 'ru':
                lang = '–†—É—Å—Å–∫–∏–π'
            elif user.lang_user == 'en':
                lang = 'English'
            elif user.lang_user == 'uz':
                lang = "O'zbek"
            date_reg = user.created_at.strftime("%d.%m.%Y %H:%M")
            text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
            edit = "<i>–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>%s</b></i>" % num
            txt = text + edit
            lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
            await lil.delete()

            settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
            settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                         types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                         types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
            settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await dp.bot.send_message(id, txt, reply_markup=settings, parse_mode='HTML')
            await Settings.settings.set()
        else:
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n"
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@rate_limit(1, key="name")
@dp.message_handler(state=Settings.name)
async def name_confirm(message: types.Message, state: FSMContext):
    id = message.from_user.id
    name = message.text
    await quick_commands.update_user_name(id=message.from_user.id, name=name)
    user = await quick_commands.select_user(id)
    lang = ""
    text = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–ö–µ—à–±–µ–∫: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n\n"
    if user.lang_user == 'ru':
        lang = '–†—É—Å—Å–∫–∏–π'
    elif user.lang_user == 'en':
        lang = 'English'
    elif user.lang_user == 'uz':
        lang = "O'zbek"
    date_reg = user.created_at.strftime("%d.%m.%Y %H:%M")
    text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
    edit = "<i>–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>%s</b></i>" % name
    txt = text + edit
    lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
    await lil.delete()

    settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
    settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                 types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                 types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
    settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

    await dp.bot.send_message(id, txt, reply_markup=settings, parse_mode='HTML')
    await Settings.settings.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
@rate_limit(1, key="lang")
@dp.callback_query_handler(state=Settings.language)
async def lang_confirm(query: types.CallbackQuery, state: FSMContext):
    await query.message.edit_reply_markup(reply_markup=None)
    id = query.from_user.id
    lang_c = query.data
    user = await quick_commands.select_user(id)
    lang = ""
    text = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–ö–µ—à–±–µ–∫: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n\n"
    date_reg = user.created_at.strftime("%d.%m.%Y %H:%M")
    if lang_c == "ru":
        await quick_commands.update_user_language(id, lang_c)
        lang = '–†—É—Å—Å–∫–∏–π'
        text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
        edit = "<i>–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s</i>" % lang
        txt = text + edit
        lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
        await lil.delete()

        settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                     types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                     types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
        settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(id, txt, reply_markup=settings, parse_mode='HTML')
        await Settings.settings.set()
    elif lang_c == "en":
        await quick_commands.update_user_language(id, lang_c)
        lang = 'English'
        text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
        edit = "<i>Language successfully changed to %s</i>" % lang
        txt = text + edit
        lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
        await lil.delete()

        settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                     types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                     types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
        settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(id, txt, reply_markup=settings, parse_mode='HTML')
        await Settings.settings.set()
    elif lang_c == "uz":
        await quick_commands.update_user_language(id, lang_c)
        lang = "O'zbek"
        text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
        edit = "<i>Til muvaffaqiyatli %s ga o'zgartirildi</i>" % lang
        txt = text + edit
        lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
        await lil.delete()

        settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                     types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                     types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
        settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(id, txt, reply_markup=settings, parse_mode='HTML')
        await Settings.settings.set()
    elif lang_c == "back":
        if user.lang_user == 'ru':
            lang = '–†—É—Å—Å–∫–∏–π'
        elif user.lang_user == 'en':
            lang = 'English'
        elif user.lang_user == 'uz':
            lang = "O'zbek"
        text = text % (user.name, lang, user.number, user.orders_no, user.cashback, date_reg)
        edit = "<i>–ß—Ç–æ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?</i>"
        txt = text + edit
        lil = await dp.bot.send_message(id, "–ó–∞–≥—Ä—É–∑–∫–∞", reply_markup=ReplyKeyboardRemove())
        await lil.delete()

        settings = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        settings.row(types.InlineKeyboardButton("–ò–º—è üìù", callback_data='name'),
                     types.InlineKeyboardButton("–ù–æ–º–µ—Ä üì±", callback_data='number'),
                     types.InlineKeyboardButton("–Ø–∑—ã–∫ üí¨", callback_data='lang'))
        settings.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(id, txt, reply_markup=settings, parse_mode='HTML')
        await Settings.settings.set()
