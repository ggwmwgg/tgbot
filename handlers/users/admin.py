import gettext
import re
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Text, Command
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from loader import dp
from states.orders import Reg, Admin
from utils.db_api import quick_commands
from utils.misc import rate_limit


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏, —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞(ac_main)/–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞(oc_main)/–∫—É—Ä—å–µ—Ä–∞(cc_main)
@rate_limit(1, key="admin")
@dp.message_handler(Command("admin"), state=None)
async def acp(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    if await quick_commands.select_user(id=message.from_user.id):
        id = message.from_user.id
        lang = await quick_commands.select_language(id)
        lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
        lan.install()
        _ = lan.gettext
        rights = await quick_commands.check_rights(id=message.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –∞–¥–º–∏–Ω–∞—Ö
        if rights == 0:

            main_menu = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                    ],
                    [
                        KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                        KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                    ],
                    [
                        KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                        KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                    ]
                ],
                resize_keyboard=True
            )

            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É", reply_markup=main_menu)
        elif rights == 1: # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∞–¥–º–∏–Ω–∞—Ö

            ac_main = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üßë‚Äçü§ù‚Äçüßë"),
                        KeyboardButton(text="–ó–∞–∫–∞–∑—ã üõí"),
                    ],
                    [
                        KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                    ]
                ],
                resize_keyboard=True
            )

            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å", reply_markup=ac_main)
            await Admin.a_main.set()
        elif rights == 2: # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö

            main_menu = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
                    ],
                    [
                        KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                        KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
                    ],
                    [
                        KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                        KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
                    ]
                ],
                resize_keyboard=True
            )

            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É", reply_markup=main_menu)
        elif rights == 3: # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –∫—É—Ä—å–µ—Ä–∞—Ö
            user = await quick_commands.select_user(id=message.from_user.id)
            orders = await quick_commands.select_all_orders_courier(user.id)

            orders_list = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
            count = 0
            count_all = 0
            for order in orders:
                status = ""
                if order.status == 1:
                    status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                    stat = f"‚Ññ{order.id} | {status}"
                    orders_list.add(types.InlineKeyboardButton(stat, callback_data=order.id))
                    count += 1
                    count_all += 1
                elif order.status == 2:
                    status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                    stat = f"‚Ññ{order.id} | {status}"
                    orders_list.add(types.InlineKeyboardButton(stat, callback_data=order.id))
                    count += 1
                    count_all += 1
                elif order.status == 3:
                    status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
                    stat = f"‚Ññ{order.id} | {status}"
                    orders_list.add(types.InlineKeyboardButton(stat, callback_data=order.id))
                    count += 1
                    count_all += 1
                elif order.status == 4:
                    status = "–î–æ—Å—Ç–∞–≤–∫–∞"
                    stat = f"‚Ññ{order.id} | {status}"
                    orders_list.add(types.InlineKeyboardButton(stat, callback_data=order.id))
                    count += 1
                    count_all += 1
                elif order.status == 5:
                    count_all += 1
                elif order.status == 6:
                    count_all += 1
            orders_list.add(types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh"))
            orders_list.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
            greeting = "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s!</b>\n\n–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ <b>%s</b> –∑–∞–∫–∞–∑–æ–≤.\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>%s</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>\n"
            greeting = greeting % (user.name, count, count_all)
            await message.answer(greeting, reply_markup=orders_list)
            await Admin.c_main.set()


    else:
        # await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!')

        languages = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="O'zbek üá∫üáø"),
                ],
                [
                    KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫")
                ],
                [
                    KeyboardButton(text="English üá∫üá∏")
                ]
            ],
            resize_keyboard=True
        )

        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.üó£\n\n"
                             f"Hello, {message.from_user.full_name}!\n"
                             "Please, choose your language.üó£\n\n"
                             f"Keling, {message.from_user.full_name}!\n"
                             "Avvaliga xizmat ko'rsatish tilini tanlab olaylik.üó£", reply_markup=languages)

        await Reg.language.set()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫ –ø–æ id/–Ω–æ–º–µ—Ä—É –∏ –Ω–∞–∑–∞–¥)
@rate_limit(1, key="admin_main")
@dp.message_handler(Text(equals=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üßë‚Äçü§ù‚Äçüßë", "Users üßë‚Äçü§ù‚Äçüßë", "Foydalanuvchilar üßë‚Äçü§ù‚Äçüßë"]), state=Admin.a_main)
async def a_users_main_m(message: types.Message):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    ac_users = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ ID üÜî"),
                KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±"),
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=ac_users)
    await Admin.users.set()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ –∑–∞–∫–∞–∑—ã, —Ñ–∏–ª–∏–∞–ª—É, –∞–∫—Ç–∏–≤–Ω—ã–µ,
# –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —Ñ–∏–ª–∏–∞–ª—É, –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
# –∏–Ω—Ñ–æ –∑–∞–∫–∞–∑–∞ –ø–æ id –∏ –Ω–∞–∑–∞–¥)
@rate_limit(1, key="admin_main")
@dp.message_handler(Text(equals=["–ó–∞–∫–∞–∑—ã üõí", "Orders üõí", "Buyurtmalar üõí"]), state=Admin.a_main)
async def a_orders_main_m(message: types.Message, state: FSMContext):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    orders = await quick_commands.select_all_orders()
    count_all = 0  # –°—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    count_not_all = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
    for i in orders:
        if i.status != 6:
            count_not_all += 1
            if i.status != 5:
                count_all += 1

    kiki = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    text = ""
    for branch in await quick_commands.select_all_branches_list():
        count = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
        for order in await quick_commands.select_active_orders_by_branch(branch):
            count += 1
            kiki += 1
        text += "<i>%s</i> - %s\n" % (branch, count)
    koker = "<i><b>–ó–∞–∫–∞–∑—ã:</b></i>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (<b>%s</b>):\n\n" % kiki
    kikir = "\n\n\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)- %s</b>\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö)- %s</b>" % (
    count_not_all, count_all)
    txt = koker + text + kikir
    lilo = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
    await lilo.delete()

    orders_a = types.InlineKeyboardMarkup(row_width=1)
    orders_a.row(types.InlineKeyboardButton("–í—Å–µ", callback_data='all'),
                 types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='all_a'))
    orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ —Ñ–∏–ª–∏–∞–ª—É", callback_data='branch'),
                 types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='branch_a'))
    orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='num_id'),
                 types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='num_id_a'))
    orders_a.row(types.InlineKeyboardButton("–ò–Ω—Ñ–æ –ø–æ id –∑–∞–∫–∞–∑–∞", callback_data='num_id_o'))
    orders_a.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))

    msg = await message.answer(txt, reply_markup=orders_a)
    await state.update_data(msg_id=msg.message_id)
    await Admin.orders.set()


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω–∫–∏
@rate_limit(1, key="admin_main")
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Admin.a_main)
async def a_users_main_m_back(message: types.Message, state: FSMContext):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    main_menu = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ üçΩ"),
            ],
            [
                KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù"),
                KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí")
            ],
            [
                KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üì≤"),
                KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=main_menu)
    await state.finish()


# –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –∞–¥–º–∏–Ω–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏|–∑–∞–∫–∞–∑–∞–º–∏
@rate_limit(1, key="admin_main_id")
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Admin.users)
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]), state=Admin.orders)
async def a_users_back(message: types.Message):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext

    ac_main = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üßë‚Äçü§ù‚Äçüßë"),
                KeyboardButton(text="–ó–∞–∫–∞–∑—ã üõí"),
            ],
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=ac_main)
    await Admin.a_main.set()


# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
@rate_limit(1, key="admin_main_id")
@dp.message_handler(Text(equals=["–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±", "Info by number üì±", "Raqam bo'yicha ma'lumot üì±"]), state=Admin.users)
async def a_users_info_num_kok(message: types.Message):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    ac_back = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=ac_back)
    await Admin.user_info_by_number.set()


# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
@rate_limit(1, key="admin_main_id")
@dp.message_handler(Text(equals=["–ò–Ω—Ñ–æ –ø–æ ID üÜî", "Info by ID üÜî", "ID bo'yicha ma'lumot üÜî"]), state=Admin.users)
async def a_users_info_id(message: types.Message):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    ac_back = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
            ],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=ac_back)
    await Admin.user_info_by_id.set()


# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
@rate_limit(1, key="admin_main_id")
@dp.message_handler(state=Admin.user_info_by_number, content_types=["text"])
async def a_users_n(message: types.Message, state: FSMContext):
    number = message.text
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    pattern = '(^\+998[8-9])\d{8}$'
    result = re.match(pattern, number)
    back_b = ["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]
    if message.text in back_b:

        ac_users = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ ID üÜî"),
                    KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±"),
                ],
                [
                    KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                ]
            ],
            resize_keyboard=True
        )

        await message.answer("Choose option", reply_markup=ac_users)
        await Admin.users.set()
    elif result:
        try:
            user = await quick_commands.select_user_by_number(number)
            await state.update_data(user_id=user.id)
            rights_s = await quick_commands.check_rights_info(user.id)

            banned_s = await quick_commands.check_ban_info(user.id)
            time_registered = user.created_at.strftime("%d.%m.%Y %H:%M:%S")
            time_updated = user.updated_at.strftime("%d.%m.%Y %H:%M:%S")
            info_a = "ID: %s\nName: %s\nLanguage: %s\nNumber: %s\nUsername: @%s\nOrders number: %s\nReferral link: %s\nCashback: %s\nBanned? %s\nRights: %s\nRegistration date: %s\nLast update date: %s\n\n" % (
                user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
                user.cashback, banned_s, rights_s, time_registered, time_updated)
            lilo = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
            await lilo.delete()

            keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
            keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                                types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await message.answer(info_a, reply_markup=keyboard_markup)

            await Admin.user_main_info.set()

        except Exception as e:
            err_en = "Error: %s" % e
            err = "–û—à–∏–±–∫–∞:\n%s" % err_en

            ac_users = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ ID üÜî"),
                        KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±"),
                    ],
                    [
                        KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                    ]
                ],
                resize_keyboard=True
            )

            await message.answer(err, reply_markup=ac_users)
            await Admin.users.set()
    else:

        ac_back = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                ],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        err_wrong_en = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567"
        await message.answer(err_wrong_en, reply_markup=ac_back)


# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ id –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
@rate_limit(1, key="admin_main_id")
@dp.message_handler(state=Admin.user_info_by_id, content_types=["text"])
async def a_users(message: types.Message, state: FSMContext):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    back_b = ["–ù–∞–∑–∞–¥ üîô", "Orqaga üîô", "Back üîô"]
    if message.text in back_b:

        ac_users = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ ID üÜî"),
                    KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±"),
                ],
                [
                    KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                ]
            ],
            resize_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=ac_users)
        await Admin.users.set()
    else:
        try:
            user_m = int(message.text)
            user = await quick_commands.select_user(user_m)
            await state.update_data(user_id=user.id)
            rights_s = await quick_commands.check_rights_info(user.id)

            banned_s = await quick_commands.check_ban_info(user.id)
            time_registered = user.created_at.strftime("%d.%m.%Y %H:%M:%S")
            time_updated = user.updated_at.strftime("%d.%m.%Y %H:%M:%S")
            info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
                user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
                user.cashback, banned_s, rights_s, time_registered, time_updated)

            lilo = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
            await lilo.delete()

            keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
            keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                                types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await message.answer(info_a, reply_markup=keyboard_markup)

            await Admin.user_main_info.set()

        except Exception as e:
            err_en = "–û—à–∏–±–∫–∞: %s" % e
            err = "–û—à–∏–±–∫–∞:\n%s" % err_en

            ac_users = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ ID üÜî"),
                        KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±"),
                    ],
                    [
                        KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                    ]
                ],
                resize_keyboard=True
            )

            await message.answer(err, reply_markup=ac_users)
            await Admin.users.set()


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–æ id/–Ω–æ–º–µ—Ä—É
@dp.callback_query_handler(lambda cb: cb.data in ["name", "lang", "number", "orders_no",
                                                  "cashback", "ban", "is_admin", "back"],
                           state=Admin.user_main_info)
async def inline_kb_answer_callback_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # send answer to close the rounding circle
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    answer_data = query.data
    async with state.proxy() as data:
        user_id = int(data["user_id"])
        user = await quick_commands.select_user(user_id)
        rights_s = await quick_commands.check_rights_info(user.id)
        banned_s = await quick_commands.check_ban_info(user.id)
        time_registered = user.created_at.strftime("%d.%m.%Y %H:%M:%S")
        time_updated = user.updated_at.strftime("%d.%m.%Y %H:%M:%S")

        if answer_data == 'name':
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)
            name_change = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % user.id
            await dp.bot.send_message(query.from_user.id, name_change, reply_markup=ReplyKeyboardRemove())
            await Admin.user_main_info_name.set()
        elif answer_data == 'lang':
            info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
                user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
                user.cashback, banned_s, rights_s, time_registered, time_updated)
            lang_choose = info_a + "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"

            lang_markup = types.InlineKeyboardMarkup(row_width=1)
            lang_markup.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='ru'),
                            types.InlineKeyboardButton("–£–∑–±–µ–∫—Å–∫–∏–π üá∫üáø", callback_data='uz'),
                            types.InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá∫üá∏", callback_data='en'))

            await dp.bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
                                           text=lang_choose, reply_markup=lang_markup)
            await Admin.user_main_info_lang.set()
        elif answer_data == 'number':
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)
            number_change = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998911234567 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % user.id
            await dp.bot.send_message(query.from_user.id, number_change, reply_markup=ReplyKeyboardRemove())
            await Admin.user_main_info_number.set()
        elif answer_data == 'cashback':
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)
            cashback_change = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ—à–±–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % user.id
            await dp.bot.send_message(query.from_user.id, cashback_change, reply_markup=ReplyKeyboardRemove())
            await Admin.user_main_info_cashback.set()
        elif answer_data == 'ban':
            info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
                user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
                user.cashback, banned_s, rights_s, time_registered, time_updated)
            ban_choose = info_a + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"

            ban_markup = types.InlineKeyboardMarkup(row_width=1)
            ban_markup.add(types.InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å üü•", callback_data='ban'),
                           types.InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å üü©", callback_data='unban'))

            await dp.bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
                                           text=ban_choose, reply_markup=ban_markup)
            await Admin.user_main_info_ban.set()
        elif answer_data == 'is_admin':
            info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
                user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
                user.cashback, banned_s, rights_s, time_registered, time_updated)
            rights_choose = info_a + "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

            rights_markup = types.InlineKeyboardMarkup(row_width=1)
            rights_markup.add(types.InlineKeyboardButton("–ê–¥–º–∏–Ω ü™¨", callback_data='1'),
                              types.InlineKeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä üìû", callback_data='2'),
                              types.InlineKeyboardButton("–ö—É—Ä—å–µ—Ä üöö", callback_data='3'),
                              types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë®‚Äç", callback_data='0'))

            await dp.bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
                                           text=rights_choose, reply_markup=rights_markup)
            await Admin.user_main_info_rights.set()
        else:
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)

            ac_users = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ ID üÜî"),
                        KeyboardButton(text="–ò–Ω—Ñ–æ –ø–æ –Ω–æ–º–µ—Ä—É üì±"),
                    ],
                    [
                        KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                    ]
                ],
                resize_keyboard=True
            )

            await dp.bot.send_message(query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=ac_users)
            await Admin.users.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@rate_limit(1, key="admin_main_id")
@dp.message_handler(state=Admin.user_main_info_name)
async def name_ac_change(message: types.Message, state: FSMContext):
    name = message.text
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    async with state.proxy() as data:
        user_id = int(data["user_id"])
        await quick_commands.update_user_name(user_id, name)
        user1 = await quick_commands.select_user(user_id)
        rights_s = await quick_commands.check_rights_info(user1.id)
        banned_s = await quick_commands.check_ban_info(user1.id)
        time_registered = user1.created_at.strftime("%d.%m.%Y %H:%M:%S")
        time_updated = user1.updated_at.strftime("%d.%m.%Y %H:%M:%S")

        info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
            user1.id, user1.name, user1.lang_user, user1.number, user1.username, user1.orders_no, user1.referral,
            user1.cashback, banned_s, rights_s, time_registered, time_updated)
        info_b = "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %s" % (user_id, name)
        name_changed = info_a + info_b
        c_c = "–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ %s" % name
        await dp.bot.send_message(user_id, c_c)

        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                            types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                            types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await message.answer(name_changed, reply_markup=keyboard_markup)
        await Admin.user_main_info.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda cb: cb.data in ["ru", "uz", "en"], state=Admin.user_main_info_lang)
async def inline_kb_answer_lang_callback_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # send answer to close the rounding circle
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    answer_data = query.data
    # logging.info(f"answer_data={answer_data}")
    # here we can work with query.data
    # "name", "lang", "number", "orders_no", "cashback", "ban", "is_admin", "back"
    async with state.proxy() as data:
        user_id = int(data["user_id"])
        await quick_commands.update_user_language(user_id, answer_data)
        user = await quick_commands.select_user(user_id)
        rights_s = await quick_commands.check_rights_info(user.id)
        banned_s = await quick_commands.check_ban_info(user.id)
        time_registered = user.created_at.strftime("%d.%m.%Y %H:%M:%S")
        time_updated = user.updated_at.strftime("%d.%m.%Y %H:%M:%S")

        info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
            user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
            user.cashback, banned_s, rights_s, time_registered, time_updated)
        lang_changed = "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % (answer_data, user_id)
        lang_changed_a = info_a + lang_changed
        if answer_data == 'ru':
            ans = "–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
        elif answer_data == 'uz':
            ans = "Tiliz o'zgartirildi"
        elif answer_data == 'en':
            ans = "Your language was changed to English"

        await dp.bot.send_message(user_id, ans)

        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                            types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                            types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
                                       text=lang_changed_a, reply_markup=keyboard_markup)
        await Admin.user_main_info.set()
        # await dp.bot.edit_message_reply_markup(query.from_user.id, query.message.message_id, reply_markup=lang_markup)
    # else:
    #     await bot.send_message(query.from_user.id, "Invalid callback data!")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@rate_limit(2, key="nn")
@dp.message_handler(state=Admin.user_main_info_number)
async def acp_nn(message: types.Message, state: FSMContext):
    number = message.text
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext

    pattern = '(^\+998[8-9])\d{8}$'
    result = re.match(pattern, number)

    if result:
        async with state.proxy() as data:
            user_id = int(data["user_id"])
            await quick_commands.update_user_number(user_id, number)
            user1 = await quick_commands.select_user(user_id)
            rights_s = await quick_commands.check_rights_info(user1.id)
            banned_s = await quick_commands.check_ban_info(user1.id)
            time_registered = user1.created_at.strftime("%d.%m.%Y %H:%M:%S")
            time_updated = user1.updated_at.strftime("%d.%m.%Y %H:%M:%S")

            info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
                user1.id, user1.name, user1.lang_user, user1.number, user1.username, user1.orders_no, user1.referral,
                user1.cashback, banned_s, rights_s, time_registered, time_updated)
            number_changed = "–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % (number, user_id)
            number_changed_a = info_a + number_changed
            c_c = "–í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s" % number
            await dp.bot.send_message(user_id, c_c)

            keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
            keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                                types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await message.answer(number_changed_a, reply_markup=keyboard_markup)
            await Admin.user_main_info.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998911234567")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@rate_limit(2, key="nn")
@dp.message_handler(state=Admin.user_main_info_cashback)
async def acp_cashback(message: types.Message, state: FSMContext):
    id = message.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    if message.text.isdigit():
        number = int(message.text)
        async with state.proxy() as data:
            user_id = int(data["user_id"])
            await quick_commands.set_cashback(user_id, number)
            user1 = await quick_commands.select_user(user_id)
            rights_s = await quick_commands.check_rights_info(user1.id)
            banned_s = await quick_commands.check_ban_info(user1.id)
            time_registered = user1.created_at.strftime("%d.%m.%Y %H:%M:%S")
            time_updated = user1.updated_at.strftime("%d.%m.%Y %H:%M:%S")
            info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
                user1.id, user1.name, user1.lang_user, user1.number, user1.username, user1.orders_no, user1.referral,
                user1.cashback, banned_s, rights_s, time_registered, time_updated)
            cashback_changed = "–ö–µ—à–±–µ–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % (number, user_id)
            cashback_changed_a = info_a + cashback_changed
            c_c = "–í–∞—à –∫–µ—à–±–µ–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s" % number
            await dp.bot.send_message(user_id, c_c)

            keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
            keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                                types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                                types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                                types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                                types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await message.answer(cashback_changed_a, reply_markup=keyboard_markup)
            await Admin.user_main_info.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda cb: cb.data in ["ban", "unban"], state=Admin.user_main_info_ban)
async def inline_kb_answer_lang_callback_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # send answer to close the rounding circle
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext

    answer_data = query.data
    # logging.info(f"answer_data={answer_data}")
    # here we can work with query.data
    # "name", "lang", "number", "orders_no", "cashback", "ban", "is_admin", "back"
    async with state.proxy() as data:
        user_id = int(data["user_id"])
        user = await quick_commands.select_user(user_id)
        if answer_data == "ban":
            await quick_commands.ban_user(user_id)
            await quick_commands.block_user(user)

        else:
            await quick_commands.unban_user(user_id)
            await quick_commands.unblock_user(user)

        # user = await quick_commands.select_user(user_id)
        rights_s = await quick_commands.check_rights_info(user.id)
        banned_s = await quick_commands.check_ban_info(user.id)
        time_registered = user.created_at.strftime("%d.%m.%Y %H:%M:%S")
        time_updated = user.updated_at.strftime("%d.%m.%Y %H:%M:%S")
        info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
            user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
            user.cashback, banned_s, rights_s, time_registered, time_updated)
        ban_changed = "–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞ –∏–∑–º–µ–Ω–µ –Ω–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % (answer_data, user_id)
        ban_changed_a = info_a + ban_changed
        c_c = "–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s" % answer_data
        await dp.bot.send_message(user_id, c_c)

        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                            types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                            types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
                                       text=ban_changed_a, reply_markup=keyboard_markup)
        await Admin.user_main_info.set()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(lambda cb: cb.data in ["0", "1", "2", "3"], state=Admin.user_main_info_rights)
async def inline_kb_answer_lang_callback_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # send answer to close the rounding circle
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    answer_data = query.data
    # logging.info(f"answer_data={answer_data}")
    # here we can work with query.data
    # "name", "lang", "number", "orders_no", "cashback", "ban", "is_admin", "back"
    async with state.proxy() as data:
        user_id = int(data["user_id"])
        kok = ""
        if answer_data == "1":
            await quick_commands.set_rights(user_id, 1)
            kok = "–ê–¥–º–∏–Ω"
        elif answer_data == "2":
            await quick_commands.set_rights(user_id, 2)
            kok = "–û–ø–µ—Ä–∞—Ç–æ—Ä"
        elif answer_data == "3":
            await quick_commands.set_rights(user_id, 3)
            kok = "–ö—É—Ä—å–µ—Ä"
        else:
            await quick_commands.set_rights(user_id, 0)
            kok = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        user = await quick_commands.select_user(user_id)
        rights_s = await quick_commands.check_rights_info(user.id)
        banned_s = await quick_commands.check_ban_info(user.id)
        time_registered = user.created_at.strftime("%d.%m.%Y %H:%M:%S")
        time_updated = user.updated_at.strftime("%d.%m.%Y %H:%M:%S")
        info_a = "ID: %s\n–ò–º—è: %s\n–Ø–∑—ã–∫: %s\n–ù–æ–º–µ—Ä: %s\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @%s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: %s\n–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: %s\n–ö–µ—à–±–µ–∫: %s\n–ó–∞–±–∞–Ω–µ–Ω? %s\n–ü—Ä–∞–≤–∞: %s\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s\n–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n\n" % (
            user.id, user.name, user.lang_user, user.number, user.username, user.orders_no, user.referral,
            user.cashback, banned_s, rights_s, time_registered, time_updated)
        rights_changed = "–ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s" % (kok, user_id)
        rights_changed_a = info_a + rights_changed
        c_c = "–í–∞—à–∏ –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ %s" % kok
        await dp.bot.send_message(user_id, c_c)

        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        keyboard_markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è üìù", callback_data='name'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üó£", callback_data='lang'),
                            types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä üì≤", callback_data='number'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–µ—à–±–µ–∫ ü§ë", callback_data='cashback'),
                            types.InlineKeyboardButton("–ë–∞–Ω/–†–∞–∑–±–∞–Ω üü•", callback_data='ban'),
                            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ ü™¨", callback_data='is_admin'),
                            types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
                                       text=rights_changed_a, reply_markup=keyboard_markup)
        await Admin.user_main_info.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query_handler(
    lambda cb: cb.data in ["all", "all_a", "branch", "branch_a", "num_id", "num_id_a", "num_id_o", "back"],
    state=Admin.orders)
async def inline_kb_answer_callback_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()  # send answer to close the rounding circle
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    answer_data = query.data

    async with state.proxy() as data:
        msg = data["msg_id"]

        if answer_data == 'all':  # –í—Å–µ –∑–∞–∫–∞–∑—ã
            keyboard_all_orders = types.InlineKeyboardMarkup(row_width=1)
            orders = await quick_commands.select_all_orders()
            for order in orders:
                text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
                if order.status == 1:
                    status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
                elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                    status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                elif order.status == 3:
                    status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
                elif order.status == 4:
                    status = "–î–æ—Å—Ç–∞–≤–∫–∞"
                elif order.status == 5:
                    status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                elif order.status == 6:
                    status = "–û—Ç–º–µ–Ω–µ–Ω"

                button = "‚Ññ%s %s" % (order.id, status)
                keyboard_all_orders.add(types.InlineKeyboardButton(text=button, callback_data=order.id))
            keyboard_all_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, text, reply_markup=keyboard_all_orders)
            await Admin.order_call.set()

        elif answer_data == 'all_a':  # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
            orders = await quick_commands.select_all_active_orders()
            for order in orders:
                text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
                button = "‚Ññ%s %s" % (order.id, status)
                keyboard_all_a_orders.add(types.InlineKeyboardButton(text=button, callback_data=order.id))
            keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, text, reply_markup=keyboard_all_a_orders)
            await Admin.order_call.set()
        elif answer_data == 'branch':  # –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
            orders = await quick_commands.select_all_branches()
            for order in orders:
                text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
                keyboard_all_a_orders.add(types.InlineKeyboardButton(order.name, callback_data=order.name))
            keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, text, reply_markup=keyboard_all_a_orders)
            await Admin.order_by_fil.set()
        elif answer_data == 'branch_a':  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
            orders = await quick_commands.select_all_branches()
            for order in orders:
                text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
                keyboard_all_a_orders.add(types.InlineKeyboardButton(order.name, callback_data=order.name))
            keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, text, reply_markup=keyboard_all_a_orders)
            await Admin.order_a_by_fil.set()
        elif answer_data == 'num_id':  # –ó–∞–∫–∞–∑—ã –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            txt = "–í–≤–µ–¥–∏—Ç–µ <b>id</b> –∏–ª–∏ <b>–Ω–æ–º–µ—Ä</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, txt)
            await Admin.order_by_num.set()
        elif answer_data == 'num_id_a':  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            txt = "–í–≤–µ–¥–∏—Ç–µ <b>id</b> –∏–ª–∏ <b>–Ω–æ–º–µ—Ä</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, txt)
            await Admin.order_a_by_num.set()
        elif answer_data == 'num_id_o':  # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
            txt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
            await dp.bot.send_message(query.message.chat.id, txt)
            await Admin.order_by_ID.set()
            # pass
        elif answer_data == 'back':  # –ù–∞–∑–∞–¥
            await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

            ac_main = ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üßë‚Äçü§ù‚Äçüßë"),
                        KeyboardButton(text="–ó–∞–∫–∞–∑—ã üõí"),
                    ],
                    [
                        KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
                    ]
                ],
                resize_keyboard=True
            )

            await dp.bot.send_message(query.message.chat.id, "Choose option", reply_markup=ac_main)
            await Admin.a_main.set()

        # await dp.bot.edit_message_reply_markup(query.from_user.id, query.message.message_id, reply_markup=lang_markup)
    # else:
    #     await bot.send_message(query.from_user.id, "Invalid callback data!")


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
@dp.callback_query_handler(state=Admin.order_a_by_fil)
async def process_a_orders_by_branch(query: types.CallbackQuery, state: FSMContext):
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    if query.data == 'back':
        orders = await quick_commands.select_all_orders()
        count_all = 0  # –°—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        count_not_all = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
        for i in orders:
            if i.status != 6:
                count_not_all += 1
                if i.status != 5:
                    count_all += 1

        kiki = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        text = ""
        for branch in await quick_commands.select_all_branches_list():
            count = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            for order in await quick_commands.select_active_orders_by_branch(branch):
                count += 1
                kiki += 1
            text += "<i>%s</i> - %s\n" % (branch, count)
        koker = "<i><b>–ó–∞–∫–∞–∑—ã:</b></i>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (<b>%s</b>):\n\n" % kiki
        kikir = "\n\n\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)- %s</b>\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö)- %s</b>" % (
            count_not_all, count_all)
        txt = koker + text + kikir
        await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å

        orders_a = types.InlineKeyboardMarkup(row_width=1)
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ", callback_data='all'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='all_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ —Ñ–∏–ª–∏–∞–ª—É", callback_data='branch'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='branch_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='num_id'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='num_id_a'))
        orders_a.row(types.InlineKeyboardButton("–ò–Ω—Ñ–æ –ø–æ id –∑–∞–∫–∞–∑–∞", callback_data='num_id_o'))
        orders_a.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))

        msg = await dp.bot.send_message(query.message.chat.id, txt, reply_markup=orders_a)
        # msg = await message.answer(txt, reply_markup=orders_a)
        await state.update_data(msg_id=msg.message_id)
        await Admin.orders.set()
    else:

        user_id = query.from_user.id
        lang = await quick_commands.select_language(user_id)
        branch = query.data
        text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
        keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
        orders = await quick_commands.select_active_orders_by_branch(branch)
        for order in orders:
            status = ""
            if order.status == 1:
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
            elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            # text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
            order_in = "‚Ññ%s %s" % (order.id, status)
            keyboard_all_a_orders.add(types.InlineKeyboardButton(order_in, callback_data=order.id))
        keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
        await dp.bot.send_message(query.message.chat.id, text, reply_markup=keyboard_all_a_orders)
        await Admin.order_call.set()


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª–∏–∞–ª—É
@dp.callback_query_handler(state=Admin.order_by_fil)
async def process_orders_by_branch(query: types.CallbackQuery, state: FSMContext):
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    if query.data == 'back':
        orders = await quick_commands.select_all_orders()
        count_all = 0  # –°—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        count_not_all = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
        for i in orders:
            if i.status != 6:
                count_not_all += 1
                if i.status != 5:
                    count_all += 1

        kiki = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        text = ""
        for branch in await quick_commands.select_all_branches_list():
            count = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            for order in await quick_commands.select_active_orders_by_branch(branch):
                count += 1
                kiki += 1
            text += "<i>%s</i> - %s\n" % (branch, count)
        koker = "<i><b>–ó–∞–∫–∞–∑—ã:</b></i>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (<b>%s</b>):\n\n" % kiki
        kikir = "\n\n\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)- %s</b>\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö)- %s</b>" % (
            count_not_all, count_all)
        txt = koker + text + kikir
        await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å

        orders_a = types.InlineKeyboardMarkup(row_width=1)
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ", callback_data='all'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='all_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ —Ñ–∏–ª–∏–∞–ª—É", callback_data='branch'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='branch_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='num_id'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='num_id_a'))
        orders_a.row(types.InlineKeyboardButton("–ò–Ω—Ñ–æ –ø–æ id –∑–∞–∫–∞–∑–∞", callback_data='num_id_o'))
        orders_a.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))

        msg = await dp.bot.send_message(query.message.chat.id, txt, reply_markup=orders_a)
        # msg = await message.answer(txt, reply_markup=orders_a)
        await state.update_data(msg_id=msg.message_id)
        await Admin.orders.set()
    else:
        user_id = query.from_user.id
        lang = await quick_commands.select_language(user_id)
        branch = query.data
        text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
        keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
        orders = await quick_commands.select_orders_by_branch(branch)
        for order in orders:
            status = ""
            if order.status == 1:
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
            elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            # text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
            order_in = "‚Ññ%s %s" % (order.id, status)
            keyboard_all_a_orders.add(types.InlineKeyboardButton(order_in, callback_data=order.id))
        keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
        await dp.bot.send_message(query.message.chat.id, text, reply_markup=keyboard_all_a_orders)
        await Admin.order_call.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Admin.order_by_num)
async def process_order_by_user_number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    id = message.text
    text = ""
    pattern = '(^\+998[8-9])\d{8}$'
    result = re.match(pattern, id)
    int_id = int(id)

    keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
    if result:
        user = await quick_commands.select_user_by_number(id)
        orders = await quick_commands.select_all_orders_by_id(user.id)
        for order in orders:
            status = ""
            if order.status == 1:
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
            elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
            order_in = "‚Ññ%s %s" % (order.id, status)
            keyboard_all_a_orders.add(types.InlineKeyboardButton(order_in, callback_data=order.id))
        keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        # await dp.bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
        await dp.bot.send_message(message.chat.id, text, reply_markup=keyboard_all_a_orders)
        await Admin.order_call.set()
    elif int_id:
        user = await quick_commands.select_user(int_id)
        orders = await quick_commands.select_all_orders_by_id(user.id)
        for order in orders:
            status = ""
            if order.status == 1:
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
            elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
            order_in = "‚Ññ%s %s" % (order.id, status)
            keyboard_all_a_orders.add(types.InlineKeyboardButton(order_in, callback_data=order.id))
        keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        # await dp.bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
        await dp.bot.send_message(message.chat.id, text, reply_markup=keyboard_all_a_orders)
        await Admin.order_call.set()
    else:
        text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!"
        await dp.bot.send_message(message.chat.id, text)  # –£–¥–∞–ª—è–µ–º —Å–º—Å


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Admin.order_a_by_num)
async def process_order_by_user_number(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    id = message.text
    text = ""
    pattern = '(^\+998[8-9])\d{8}$'
    result = re.match(pattern, id)
    int_id = int(id)

    keyboard_all_a_orders = types.InlineKeyboardMarkup(row_width=1)
    if result:
        user = await quick_commands.select_user_by_number(id)
        orders = await quick_commands.select_all_active_orders_by_id(user.id)
        for order in orders:
            status = ""
            if order.status == 1:
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
            elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
            order_in = "‚Ññ%s %s" % (order.id, status)
            keyboard_all_a_orders.add(types.InlineKeyboardButton(order_in, callback_data=order.id))
        keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        # await dp.bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
        await dp.bot.send_message(message.chat.id, text, reply_markup=keyboard_all_a_orders)
        await Admin.order_call.set()
    elif int_id:
        user = await quick_commands.select_user(int_id)
        orders = await quick_commands.select_all_active_orders_by_id(user.id)
        for order in orders:
            status = ""
            if order.status == 1:
                status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
            elif order.status == 2:  # 1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            text = "<i>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:</i>"
            order_in = "‚Ññ%s %s" % (order.id, status)
            keyboard_all_a_orders.add(types.InlineKeyboardButton(order_in, callback_data=order.id))
        keyboard_all_a_orders.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
        # await dp.bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å
        await dp.bot.send_message(message.chat.id, text, reply_markup=keyboard_all_a_orders)
        await Admin.order_call.set()
    else:
        text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!"
        await dp.bot.send_message(message.chat.id, text)  # –£–¥–∞–ª—è–µ–º —Å–º—Å


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ id –∑–∞–∫–∞–∑–∞
# @dp.callback_query_handler(state=Admin.order_by_ID)
@dp.message_handler(state=Admin.order_by_ID)
async def process_order_by_ID(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    id = message.text
    try:
        id = int(id)
        await state.update_data(order_id=id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –∑–∞–∫–∞–∑–∞ –≤ state
        order = await quick_commands.select_order_by_id(id)
        txt = await quick_commands.admin_text(id, lang)
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
        txt += "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
        # await state.update_data()

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(message.from_user.id, txt, parse_mode="HTML", reply_markup=order_info)

        await Admin.order_by_ID_action.set()

    except Exception as e:
        error = "–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        await message.answer(error)


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ ID –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(state=Admin.order_by_ID_action)
async def process_order_by_ID_action(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    status = ""
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext

    async with state.proxy() as data:
        order_id = data["order_id"]
        txt = await quick_commands.admin_text(order_id, lang)
        order_id = int(order_id)
    order = await quick_commands.select_order_by_id(order_id)
    if query.data == "confirmed":

        text = ""
        msg_f_u = "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ%s: %s"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>"
        status = ""
        if order.status == 2:
            status = "–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 4:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 5:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            await quick_commands.remove_order_from_user(order.user_id)
            await quick_commands.remove_cashback_from_user(order.user_id, order.id)
        elif order.status == 6:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        else:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        toxt = toxt % status
        text = txt + toxt
        msg_f_u = msg_f_u % (order_id, status)
        await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        await quick_commands.change_status(order_id, 2)

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
        # pass
    elif query.data == "cooking":

        text = ""
        msg_f_u = "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ%s: %s"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>"
        status = ""
        if order.status == 3:
            status = "–ó–∞–∫–∞–∑ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"
        elif order.status == 4:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"
        elif order.status == 5:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"
            await quick_commands.remove_order_from_user(order.user_id)
            await quick_commands.remove_cashback_from_user(order.user_id, order.id)
        elif order.status == 6:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"
        else:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        toxt = toxt % status
        text = txt + toxt
        msg_f_u = msg_f_u % (order_id, status)
        await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        await quick_commands.change_status(order_id, 3)

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
    elif query.data == "delivery":
        text = ""
        msg_f_u = "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ%s: %s"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>"
        status = ""
        if order.status == 4:
            status = "–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"
        elif order.status == 5:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"
            await quick_commands.remove_order_from_user(order.user_id)
            await quick_commands.remove_cashback_from_user(order.user_id, order.id)
        elif order.status == 6:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"
        else:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        toxt = toxt % status
        text = txt + toxt
        msg_f_u = msg_f_u % (order_id, status)
        await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        await quick_commands.change_status(order_id, 4)

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
    elif query.data == "delivered":
        text = ""
        msg_f_u = "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ%s: %s"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>"
        status = ""
        if order.status == 5:
            status = "–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–∏–∑–º–µ–Ω–µ–Ω —Å –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
            await quick_commands.add_order_to_user(order.user_id)
            await quick_commands.set_cashback_to_user(order.user_id, order.id)
        else:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            await quick_commands.add_order_to_user(order.user_id)
            await quick_commands.set_cashback_to_user(order.user_id, order.id)
        toxt = toxt % status
        text = txt + toxt
        msg_f_u = msg_f_u % (order_id, status)
        await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        # await quick_commands.add_order_to_user(order.user_id)
        await quick_commands.change_status(order_id, 5)

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
    elif query.data == "payed":
        text = ""
        status_o = ""
        if order.is_paid == 1:
            status_o = "–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω"
        else:
            status_o = "–û–ø–ª–∞—á–µ–Ω"
            msg_f_u = "–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ%s –æ–ø–ª–∞—á–µ–Ω" % order_id
            await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        await quick_commands.change_payment_status(order_id, 1)
        # await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)

        try:
            order = await quick_commands.select_order_by_id(order_id)
            txt = await quick_commands.admin_text(order_id, lang)
            status = ""
            if order.status == 1:
                status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            elif order.status == 2:
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
            txt += "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
            txt += "\n\n\n<i>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>%s</b></i>" % status_o

            order_info = types.InlineKeyboardMarkup(row_width=1)
            order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                           types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
            order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                           types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
            order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                           types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
            order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                           types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
            order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await query.message.edit_text(txt, parse_mode="HTML", reply_markup=order_info)
            # await dp.bot.send_message(message.from_user.id, txt, parse_mode="HTML", reply_markup=order_info)

            await Admin.order_by_ID_action.set()

        except Exception as e:
            error = "–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            # await dp.bot.answer_callback_query(user_id, text=error, show_alert=True)
            # await query.answer(error, show_alert=True)
            # await dp.bot.send_message(user_id, error)

    elif query.data == "not_payed":
        text = ""
        status_o = ""
        if order.is_paid == 0:
            status_o = "–ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω"
        else:

            status_o = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
            msg_f_u = "–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ%s –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ" % order_id
            await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        await quick_commands.change_payment_status(order_id, 0)
        try:
            order = await quick_commands.select_order_by_id(order_id)
            txt = await quick_commands.admin_text(order_id, lang)
            status = ""
            if order.status == 1:
                status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            elif order.status == 2:
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
            txt += "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
            txt += "\n\n\n<i>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>%s</b></i>" % status_o

            order_info = types.InlineKeyboardMarkup(row_width=1)
            order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                           types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
            order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                           types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
            order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                           types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
            order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                           types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
            order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await query.message.edit_text(txt, parse_mode="HTML", reply_markup=order_info)
            await dp.bot.answer_callback_query(query.id, "koker", show_alert=True)
            # await dp.bot.send_message(message.from_user.id, txt, parse_mode="HTML", reply_markup=order_info)

            await Admin.order_by_ID_action.set()

        except Exception as e:
            error = "–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            # await dp.bot.answer_callback_query(user_id,text=error, show_alert=True)
            # await query.answer(error, show_alert=True)
            # await dp.bot.send_message(user_id, error)
    elif query.data == "add_pos":
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt
        tix_t = "–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–∏—Ç—å?\n\n"
        text += tix_t

        items_keyboard = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        items_list = await quick_commands.select_all_items()
        # print(items_list)
        # print(order.items)

        for i in items_list:
            id = int(i)
            item = await quick_commands.get_item_by_id(id)
            # print(item.id)
            if lang == "ru":
                # print(item.name_ru)
                items_keyboard.add(types.InlineKeyboardButton(item.name_ru, callback_data=f"{item.id}"))
            elif lang == "en":
                items_keyboard.add(types.InlineKeyboardButton(item.name_en, callback_data=f"{item.id}"))
            elif lang == "uz":
                items_keyboard.add(types.InlineKeyboardButton(item.name_uz, callback_data=f"{item.id}"))

        # await query.message.edit_reply_markup(reply_markup=items_keyboard)
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=items_keyboard)
        await Admin.order_add_item.set()

    elif query.data == "remove_pos":
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt
        tix_t = "–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–¥–∞–ª–∏—Ç—å?\n\n"
        text += tix_t

        items_keyboard = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        items_list = await quick_commands.get_items_in_order(order_id)
        # print(items_list)
        # print(order.items)

        for i in items_list:
            id = int(i)
            item = await quick_commands.get_item_by_id(id)
            # print(item.id)
            if lang == "ru":
                # print(item.name_ru)
                items_keyboard.add(types.InlineKeyboardButton(item.name_ru, callback_data=f"{item.id}"))
            elif lang == "en":
                items_keyboard.add(types.InlineKeyboardButton(item.name_en, callback_data=f"{item.id}"))
            elif lang == "uz":
                items_keyboard.add(types.InlineKeyboardButton(item.name_uz, callback_data=f"{item.id}"))

        # await query.message.edit_reply_markup(reply_markup=items_keyboard)
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=items_keyboard)
        await Admin.order_remove_item.set()
    elif query.data == "courier_set":
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt

        select_courier_keyboard = types.InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
        couriers_list = await quick_commands.select_all_couriers()
        print(couriers_list)
        # print(order.items)

        for i in couriers_list:
            user = await quick_commands.select_user(i)

            courier_info = f"{user.number} {user.name}"
            # print(item.id)
            select_courier_keyboard.add(types.InlineKeyboardButton(courier_info, callback_data=f"{user.id}"))

        if order.type_delivery == 1:
            tix_t = "–ö–∞–∫–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å?\n\n"
            text += tix_t
            await query.message.edit_text(text, parse_mode="HTML", reply_markup=select_courier_keyboard)
            await Admin.order_set_courier.set()
        else:
            tix_t = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑\n\n"
            text += tix_t

            order_info = types.InlineKeyboardMarkup(row_width=1)
            order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                           types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
            order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                           types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
            order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                           types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
            order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                           types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
            order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
    elif query.data == "cancel":
        text = ""
        if order.status == 6:
            status = "–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω"
            toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
            text = txt + toxt
        else:

            status = "–û—Ç–º–µ–Ω–µ–Ω"
            toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
            text = txt + toxt
            msg_f_u = "–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ%s –æ—Ç–º–µ–Ω–µ–Ω" % order_id
            await dp.bot.send_message(order.user_id, msg_f_u, parse_mode="HTML")
        await quick_commands.change_status(order_id, 6)

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
    elif query.data == "back":
        await query.message.delete()
        orders = await quick_commands.select_all_orders()
        count_all = 0  # –°—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        count_not_all = 0
        for i in orders:
            if i.status != 6:
                count_not_all += 1
                if i.status == 5:
                    count_all += 1

        kiki = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        text = ""
        for branch in await quick_commands.select_all_branches_list():
            count = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            for order in await quick_commands.select_active_orders_by_branch(branch):
                count += 1
                kiki += 1
            text += "<i>%s</i> - %s\n" % (branch, count)

        koker = "<i><b>–ó–∞–∫–∞–∑—ã:</b></i>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (<b>%s</b>):\n\n" % kiki
        kikir = "\n\n\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)- %s</b>\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö) - %s</b>" % (
            count_not_all, count_all)
        txt = koker + text + kikir
        lilo = await dp.bot.send_message(query.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞...", reply_markup=ReplyKeyboardRemove())
        await lilo.delete()

        orders_a = types.InlineKeyboardMarkup(row_width=1)
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ", callback_data='all'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='all_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ —Ñ–∏–ª–∏–∞–ª—É", callback_data='branch'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='branch_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='num_id'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='num_id_a'))
        orders_a.row(types.InlineKeyboardButton("–ò–Ω—Ñ–æ –ø–æ id –∑–∞–∫–∞–∑–∞", callback_data='num_id_o'))
        orders_a.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))

        msg = await dp.bot.send_message(query.from_user.id, txt, parse_mode="HTML", reply_markup=orders_a)
        #  msg = await message.answer(txt, reply_markup=orders_a)
        await state.update_data(msg_id=msg.message_id)
        await Admin.orders.set()


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–∞–∑ –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
@dp.callback_query_handler(state=Admin.order_add_item)
async def process_order_add_action(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    status = ""
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    items_list = await quick_commands.select_all_items()
    await state.update_data(item_id=query.data)
    item_id = int(query.data)
    async with state.proxy() as data:
        order_id = data["order_id"]

        order_id = int(order_id)
        txt = await quick_commands.admin_text(order_id, lang)
        i_id = data["item_id"]
    order = await quick_commands.select_order_by_id(order_id)
    if item_id in items_list:
        item = await quick_commands.get_item_by_id(item_id)
        item_name = ""
        if lang == "ru":
            item_name = item.name_ru
        elif lang == "en":
            item_name = item.name_en
        elif lang == "uz":
            item_name = item.name_uz
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt
        tix_t = "–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: <b>%s</b>. \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n\n" % item_name
        text += tix_t

        order_by_id_quantity = types.InlineKeyboardMarkup(row_width=5)
        order_by_id_quantity.add(types.InlineKeyboardButton("1", callback_data="1"),
                                 types.InlineKeyboardButton("2", callback_data="2"),
                                 types.InlineKeyboardButton("3", callback_data='3'),
                                 types.InlineKeyboardButton("4", callback_data='4'),
                                 types.InlineKeyboardButton("5", callback_data='5'))
        order_by_id_quantity.add(types.InlineKeyboardButton("6", callback_data="6"),
                                 types.InlineKeyboardButton("7", callback_data="7"),
                                 types.InlineKeyboardButton("8", callback_data='8'),
                                 types.InlineKeyboardButton("9", callback_data='9'),
                                 types.InlineKeyboardButton("10", callback_data='10'))
        order_by_id_quantity.add(types.InlineKeyboardButton("11", callback_data="11"),
                                 types.InlineKeyboardButton("12", callback_data="12"),
                                 types.InlineKeyboardButton("13", callback_data='13'),
                                 types.InlineKeyboardButton("14", callback_data='14'),
                                 types.InlineKeyboardButton("15", callback_data='15'))
        order_by_id_quantity.add(types.InlineKeyboardButton("16", callback_data="16"),
                                 types.InlineKeyboardButton("17", callback_data="17"),
                                 types.InlineKeyboardButton("18", callback_data='18'),
                                 types.InlineKeyboardButton("19", callback_data='19'),
                                 types.InlineKeyboardButton("20", callback_data='20'))
        order_by_id_quantity.add(types.InlineKeyboardButton("21", callback_data="21"),
                                 types.InlineKeyboardButton("22", callback_data="22"),
                                 types.InlineKeyboardButton("23", callback_data='23'),
                                 types.InlineKeyboardButton("24", callback_data='24'),
                                 types.InlineKeyboardButton("25", callback_data='25'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_by_id_quantity)
        await Admin.order_add_item_quantity.set()


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–∫–∞–∑–∞ –∏ –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
@dp.callback_query_handler(state=Admin.order_remove_item)
async def process_order_remove_action(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    status = ""
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    await state.update_data(item_id=query.data)
    item_id = int(query.data)
    async with state.proxy() as data:
        order_id = data["order_id"]

        order_id = int(order_id)
        txt = await quick_commands.admin_text(order_id, lang)
        i_id = data["item_id"]
    order = await quick_commands.select_order_by_id(order_id)
    items_list = await quick_commands.get_items_in_order(order.id)
    if item_id in items_list:
        item = await quick_commands.get_item_by_id(item_id)
        item_name = ""
        if lang == "ru":
            item_name = item.name_ru
        elif lang == "en":
            item_name = item.name_en
        elif lang == "uz":
            item_name = item.name_uz
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt
        tix_t = "–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: <b>%s</b>. \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n\n" % item_name
        text += tix_t
        number = order.items[f'{item_id}']
        # print(number)
        quan = types.InlineKeyboardMarkup(row_width=3, one_time_keyboard=True)
        rem = number % 3
        rang = range(1, number, 3)
        del_e = int(number / 3) - 1
        count = 0
        for i in rang:
            if count <= del_e:
                count += 1
                quan.row(types.InlineKeyboardButton(text=f"{i}", callback_data=f"{i}"),
                         types.InlineKeyboardButton(text=f"{i + 1}", callback_data=f"{i + 1}"),
                         types.InlineKeyboardButton(text=f"{i + 2}", callback_data=f"{i + 2}"))
        if rem % 2 == 0:
            for k in range(0, rem, 2):
                quan.add(
                    types.InlineKeyboardButton(text=f"{number - rem + k + 1}", callback_data=f"{number - rem + k + 1}"),
                    types.InlineKeyboardButton(text=f"{number - rem + k + 2}", callback_data=f"{number - rem + k + 2}"))
        if rem % 2 != 0:
            for k in range(0, rem, 1):
                quan.add(
                    types.InlineKeyboardButton(text=f"{number - rem + k + 1}", callback_data=f"{number - rem + k + 1}"))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=quan)
        await Admin.order_remove_item_quantity.set()


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
@dp.callback_query_handler(state=Admin.order_add_item_quantity)
async def process_order_item_action(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext

    quantity = int(query.data)
    async with state.proxy() as data:
        order_id = data["order_id"]
        order_id = int(order_id)
        i_id = data["item_id"]
    order = await quick_commands.select_order_by_id(order_id)
    item_name = await quick_commands.select_item_name(int(i_id), lang)
    if quantity in range(26):
        order_items = order.items
        # print(order.items)
        try:
            order_items[i_id] += quantity
        except KeyError:
            order_items[i_id] = quantity
        # print(order_items)
        item = await quick_commands.get_item_by_id(int(i_id))
        price = item.price * quantity
        # print(price)
        await quick_commands.update_order_price(order_id, price, "add")
        await quick_commands.update_order_items(order_id, order_items)
        id = order_id
        try:
            id = int(id)
            await state.update_data(order_id=id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –∑–∞–∫–∞–∑–∞ –≤ state
            order = await quick_commands.select_order_by_id(id)
            txt = await quick_commands.admin_text(order.id, lang)
            status = ""
            if order.status == 1:
                status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            elif order.status == 2:
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
            await state.update_data(txt=txt)
            txt += "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
            # await state.update_data()
            txt += "\n\n<b>–¢–æ–≤–∞—Ä: <i>%s %s—à—Ç</i> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>"
            txt = txt % (item_name, query.data)

            order_info = types.InlineKeyboardMarkup(row_width=1)
            order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                           types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
            order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                           types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
            order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                           types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
            order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                           types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
            order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await query.message.edit_text(txt, parse_mode="HTML", reply_markup=order_info)
            # await dp.bot.send_message(message.from_user.id, txt, parse_mode="HTML", reply_markup=order_info)

            await Admin.order_by_ID_action.set()

        except Exception as e:
            error = "–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            await dp.bot.send_message(user_id, error)


# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
@dp.callback_query_handler(state=Admin.order_remove_item_quantity)
async def process_order_itemr_action(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext

    quantity = int(query.data)
    async with state.proxy() as data:
        order_id = data["order_id"]
        order_id = int(order_id)
        i_id = data["item_id"]
    order = await quick_commands.select_order_by_id(order_id)
    item_name = await quick_commands.select_item_name(int(i_id), lang)
    if quantity in range(1, order.items[i_id] + 1):
        order_items = order.items
        # print(order.items)
        print(order_items)
        order_items[i_id] -= quantity
        if order.items[i_id] == 0:
            del order.items[str(i_id)]

        # print(order_items)
        item = await quick_commands.get_item_by_id(int(i_id))
        price = item.price * quantity
        print(order_items)
        # print(price)
        await quick_commands.update_order_price(order_id, price, "remove")
        await quick_commands.update_order_items(order_id, order_items)
        id = order_id
        try:
            id = int(id)
            await state.update_data(order_id=id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –∑–∞–∫–∞–∑–∞ –≤ state
            order = await quick_commands.select_order_by_id(id)
            txt = await quick_commands.admin_text(order.id, lang)
            status = ""
            if order.status == 1:
                status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
            elif order.status == 2:
                status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            elif order.status == 3:
                status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
            elif order.status == 4:
                status = "–î–æ—Å—Ç–∞–≤–∫–∞"
            elif order.status == 5:
                status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
            elif order.status == 6:
                status = "–û—Ç–º–µ–Ω–µ–Ω"
            # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
            await state.update_data(txt=txt)
            txt += "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
            # await state.update_data()
            txt += "\n\n<b>–¢–æ–≤–∞—Ä: <i>%s %s—à—Ç</i> —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.\n\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>"
            txt = txt % (item_name, query.data)

            order_info = types.InlineKeyboardMarkup(row_width=1)
            order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                           types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
            order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                           types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
            order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                           types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
            order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                           types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
            order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
            order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

            await query.message.edit_text(txt, parse_mode="HTML", reply_markup=order_info)
            # await dp.bot.send_message(message.from_user.id, txt, parse_mode="HTML", reply_markup=order_info)

            await Admin.order_by_ID_action.set()

        except Exception as e:
            error = "–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            await dp.bot.send_message(user_id, error)


# –•–µ–Ω–¥–ª–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä—É
@dp.callback_query_handler(state=Admin.order_set_courier)
async def process_order_add_action(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    lang = await quick_commands.select_language(user_id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    async with state.proxy() as data:
        order_id = data["order_id"]
        order_id = int(order_id)
    txt = await quick_commands.admin_text(order_id, "ru")
    order = await quick_commands.select_order_by_id(order_id)
    couriers_list = await quick_commands.select_all_couriers()
    courier = query.data
    courier_int = int(courier)
    await quick_commands.set_courier(order_id, courier_int)
    cour = await quick_commands.select_user(courier_int)
    if courier_int in couriers_list:
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt
        tix_t = "–ö—É—Ä—å–µ—Ä <b>%s</b> –Ω–∞–∑–Ω–∞—á–µ–Ω\n\n" % cour.number
        text += tix_t
        cour_txt = "<i>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ <b>‚Ññ%s</b></i>\n\n" % order_id
        # print(items_list)
        # print(order.items)
        us_t = "–ö—É—Ä—å–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º <b>%s</b> –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ%s\n\n" % (cour.number, order_id)

        # await query.message.edit_reply_markup(reply_markup=items_keyboard)
        await dp.bot.send_message(order.user_id, us_t, parse_mode="HTML")

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(courier_int, cour_txt, parse_mode="HTML", reply_markup=order_info)
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
        await Admin.order_by_ID_action.set()
    else:
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        toxt = "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>\n\n" % status
        text = txt + toxt
        tix_t = "–¢–∞–∫–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
        text += tix_t

        # print(items_list)
        # print(order.items)

        # await query.message.edit_reply_markup(reply_markup=items_keyboard)

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await query.message.edit_text(text, parse_mode="HTML", reply_markup=order_info)
        await Admin.order_by_ID_action.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ id –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(state=Admin.order_call)
async def process_call_orders(query: types.CallbackQuery, state: FSMContext):
    id = query.from_user.id
    lang = await quick_commands.select_language(id)
    lan = gettext.translation('tgbot', localedir='locales', languages=[lang])
    lan.install()
    _ = lan.gettext
    if query.data == 'back':
        orders = await quick_commands.select_all_orders()
        count_all = 0  # –°—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        count_not_all = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
        for i in orders:
            if i.status != 6:
                count_not_all += 1
                if i.status != 5:
                    count_all += 1

        kiki = 0  # –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        text = ""
        for branch in await quick_commands.select_all_branches_list():
            count = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            for order in await quick_commands.select_active_orders_by_branch(branch):
                count += 1
                kiki += 1
            text += "<i>%s</i> - %s\n" % (branch, count)
        koker = "<i><b>–ó–∞–∫–∞–∑—ã:</b></i>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (<b>%s</b>):\n\n" % kiki
        kikir = "\n\n\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)- %s</b>\n<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö)- %s</b>" % (
            count_not_all, count_all)
        txt = koker + text + kikir
        await dp.bot.delete_message(query.message.chat.id, query.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–º—Å

        orders_a = types.InlineKeyboardMarkup(row_width=1)
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ", callback_data='all'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='all_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ —Ñ–∏–ª–∏–∞–ª—É", callback_data='branch'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='branch_a'))
        orders_a.row(types.InlineKeyboardButton("–í—Å–µ –ø–æ id/–Ω–æ–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='num_id'),
                     types.InlineKeyboardButton("<= –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data='num_id_a'))
        orders_a.row(types.InlineKeyboardButton("–ò–Ω—Ñ–æ –ø–æ id –∑–∞–∫–∞–∑–∞", callback_data='num_id_o'))
        orders_a.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))

        msg = await dp.bot.send_message(query.message.chat.id, txt, reply_markup=orders_a)
        # msg = await message.answer(txt, reply_markup=orders_a)
        await state.update_data(msg_id=msg.message_id)
        await Admin.orders.set()
    else:

        user_id = query.from_user.id
        lang = await quick_commands.select_language(user_id)
        id = int(query.data)

        # id = int(id)
        await state.update_data(order_id=id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –∑–∞–∫–∞–∑–∞ –≤ state
        order = await quick_commands.select_order_by_id(id)
        txt = await quick_commands.admin_text(id, lang)
        status = ""
        if order.status == 1:
            status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        elif order.status == 2:
            status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        elif order.status == 3:
            status = "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ"
        elif order.status == 4:
            status = "–î–æ—Å—Ç–∞–≤–∫–∞"
        elif order.status == 5:
            status = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
        elif order.status == 6:
            status = "–û—Ç–º–µ–Ω–µ–Ω"
        # (1 = –∞–∫—Ç–∏–≤–Ω—ã–π, 2 = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, 3 = –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, 4 = –¥–æ—Å—Ç–∞–≤–∫–∞, 5 = –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, 6 = –æ—Ç–º–µ–Ω–µ–Ω)
        txt += "\n<i><b>–°—Ç–∞—Ç—É—Å: %s</b></i>" % status
        # await state.update_data()
        await query.message.delete()

        order_info = types.InlineKeyboardMarkup(row_width=1)
        order_info.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", callback_data='confirmed'),
                       types.InlineKeyboardButton("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ üç≥", callback_data='cooking'))
        order_info.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ üöö", callback_data='delivery'),
                       types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úî", callback_data='delivered'))
        order_info.row(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω üü©", callback_data='payed'),
                       types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω üü•", callback_data='not_payed'))
        order_info.row(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", callback_data='add_pos'),
                       types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úñ", callback_data='remove_pos'))
        order_info.row(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data='cancel'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ üèÉ‚Äç", callback_data='courier_set'))
        order_info.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data='back'))

        await dp.bot.send_message(user_id, txt, parse_mode="HTML", reply_markup=order_info)

        await Admin.order_by_ID_action.set()
